#!/usr/bin/env bash

# Usage: 
#  ./push_dockers.bsh - Run all the docker images
#  ./push_dockers.bsh lfs_centos_5 lfs_centos_7 - Run only CentOS 5 & 7 image
#
# Special Environmet Variables
#  DOCKER_AUTOBUILD - Default 1. If set to 0, it will not build docker images 
#                before running

set -eu

#Mingw32 auto converts /drive/dir/blah to drive:\dir\blah ... Can't have that.
if [[ `uname` == MINGW* ]]; then
  MINGW_PATCH='/'
else
  MINGW_PATCH=''
fi

CUR_DIR=$(cd $(dirname "${BASH_SOURCE[0]}"); pwd)

#If you are not in docker group and you have sudo, default value is sudo
: ${SUDO=`if ( [ ! -w /var/run/docker.sock ] && id -nG | grep -qwv docker && [ "${DOCKER_HOST:+dh}" != "dh" ] ) && which sudo > /dev/null 2>&1; then echo sudo; fi`}

function split_image_name()
{ #$1 - image dockerfile
  #sets IMAGE_NAME to the basename of the dir containing the docker file
  #sets IMAGE_INFO to be the array name following my pattern
  IMAGE_NAME=$(basename ${1%.*})
  local IFS=_
  IMAGE_INFO=(${IMAGE_NAME})
}

# Parse Arguments
IMAGES=()
while [[ $# > 0 ]]; do
  if [ "$1" == "--" ]; then
    shift
    DOCKER_CMD="${@}"
    break
  else
    IMAGES+=("$1")
  fi
  shift
done

if [[ ${#IMAGES[@]} == 0 ]]; then
  IMAGES=($(ls -d ${CUR_DIR}/*.dockerfile))
fi

#Run docker to build pacakges
for DOCKER_FILE in "${IMAGES[@]}"; do
  split_image_name "${DOCKER_FILE}" #set IMAGE_NAME and IMAGE_INFO

  #Auto build docker unless DOCKER_AUTOBUILD=0
  if [[ ${DOCKER_AUTOBUILD-1} != 0 ]]; then
    ${CUR_DIR}/build_dockers.bsh ${DOCKER_FILE}
  fi

  $SUDO docker push andyneff/git-lfs_dockers:${IMAGE_NAME}

done

echo "Docker uploaded successfully!"